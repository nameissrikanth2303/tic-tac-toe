{"version":3,"sources":["components/icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","iscross","setIscross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff43299e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\r\n\r\nconst Icon = ({ name }) => {\r\n  switch (name) {\r\n    case \"circle\":\r\n      return <FaRegCircle className=\"icon\" />;\r\n    case \"cross\":\r\n      return <FaTimes className=\"icon\" />;\r\n    default:\r\n      return <FaPen className=\"icon\" />;\r\n  }\r\n};\r\nexport default Icon;\r\n","import React, { useState } from \"react\";\nimport Icon from \"./components/icon\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Button, Card, CardBody, Container, Col, Row } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\nconst App = () => {\n  const [iscross, setIscross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n  // reload game\n  const reload = () => {\n    // reload game\n    setIscross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  const CheckIsWinner = () => {\nif (\n    itemArray[0] !== \"empty\" &&\n    itemArray [0] ==itemArray[1] &&\n    itemArray [0] ==itemArray[2]\n\n\n){\nsetWinMessage(`${itemArray[0]} Wins`)\n}else if (\nitemArray[0] !== \"empty\" &&\nitemArray [0] ==itemArray[3] &&\nitemArray [0] ==itemArray[6]) {\n  setWinMessage(`${itemArray[0]} Wins`)\n\n}else if (\n  itemArray[0] !== \"empty\" &&\n itemArray [0] ==itemArray[4] &&\n itemArray [0] ==itemArray[8]) {\n  setWinMessage(`${itemArray[0]} Wins`)\n\n}else if (\nitemArray[1] !== \"empty\" &&\n itemArray [1] ==itemArray[4] &&\n itemArray [1] ==itemArray[7]) {\n  setWinMessage(`${itemArray[1]} Wins`)\n\n}else if (\n  itemArray[2] !== \"empty\" &&\n   itemArray [2] ==itemArray[4] &&\n   itemArray [2] ==itemArray[6]) {\n    setWinMessage(`${itemArray[2]} Wins`)\n  \n  }else if (\n    itemArray[2] !== \"empty\" &&\n     itemArray [2] ==itemArray[5] &&\n     itemArray [2] ==itemArray[8]) {\n      setWinMessage(`${itemArray[2]} Wins`)\n    \n    }else if (\n      itemArray[3] !== \"empty\" &&\n       itemArray [3] ==itemArray[4] &&\n       itemArray [3] ==itemArray[5]) {\n        setWinMessage(`${itemArray[3]} Wins`)\n      \n      }else if (\n        itemArray[6] !== \"empty\" &&\n         itemArray [6] ==itemArray[4] &&\n         itemArray [6] ==itemArray[2]) {\n          setWinMessage(`${itemArray[6]} Wins`)\n        \n        }else if (\n          itemArray[6] !== \"empty\" &&\n           itemArray [6] ==itemArray[7] &&\n           itemArray [6] ==itemArray[8]) {\n            setWinMessage(`${itemArray[6]} Wins`)\n          \n          }\n  };\n\n  const changeItem = (itemNumber) => {\n    // Change item\n\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\" });\n    }\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = iscross ? \"cross\" : \"circle\";\n      setIscross(!iscross);\n    } else {\n      return toast(\"already filled\", { type: \"error\" });\n    }\n    CheckIsWinner();\n  };\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-primary text-uppercase text-center\">\n                {winMessage}\n              </h1>\n\n              <Button color=\"success\" block onClick={reload}>\n                Reload\n              </Button>\n            </div>\n          ) : (\n            <h1 className=\"text-center text-warning\">\n              {iscross ? \"Cross\" : \"Circle\"} turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"warning\" onClick={() => changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}